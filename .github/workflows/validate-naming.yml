name: validate-naming

on:
  push:
    branches:
      - test-branch

jobs:
  validate-naming:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate project names (.project files) for kebab-case
        id: validate_projects
        shell: bash
        continue-on-error: true
        run: |
          echo "üîç STEP 1: Validating project names (.project files) for kebab-case..."
          violations=0

          is_kebab_case() {
            [[ "$1" =~ ^[a-z0-9]+(-[a-z0-9]+)*$ ]]
          }

          IFS=$'\n'
          project_files=($(find . -type f \( -name ".project" -o -name "*.project" \)))

          echo "üîé Found ${#project_files[@]} .project files"

          for project_file in "${project_files[@]}"; do
            proj_name=$(grep -oPm1 '(?<=<name>)[^<]+' "$project_file" || echo "")

            if [[ -z "$proj_name" ]]; then
              echo "‚ùå ERROR: No <name> tag found in $project_file"
              echo "::error file=$project_file::Missing <name> tag"
              violations=$((violations + 1))
              continue
            fi

            if [[ "$proj_name" == *.module ]]; then
              core_name="${proj_name%.module}"
            elif [[ "$proj_name" == *.parent ]]; then
              core_name="${proj_name%.parent}"
            else
              core_name="$proj_name"
            fi

            if ! is_kebab_case "$core_name"; then
              echo "‚ùå ERROR: Invalid project name '$proj_name' (found in $project_file)"
              echo "::error file=$project_file::Invalid project name '$proj_name'. Expected kebab-case"
              violations=$((violations + 1))
            fi
          done

          echo "project_violations=$violations" >> "$GITHUB_OUTPUT"

      - name: Validate process filenames (.bwp files) for camelCase
        id: validate_processes
        shell: bash
        continue-on-error: true
        run: |
          echo "üîç STEP 2: Validating process filenames (.bwp) for camelCase..."

          camel_case_regex='^[a-z]+([A-Z][a-z0-9]*)*$'
          violations=0

          mapfile -t bwp_files < <(find . -type f -name "*.bwp")
          echo "üîé Found ${#bwp_files[@]} .bwp files"

          for file in "${bwp_files[@]}"; do
            filename=$(basename "$file")
            name_without_ext="${filename%.bwp}"

            if [[ ! "$name_without_ext" =~ $camel_case_regex ]]; then
              echo "‚ùå ERROR: Invalid process name '$filename' (found in $file)"
              echo "::error file=$file::Invalid process filename '$filename'. Expected camelCase"
              violations=$((violations + 1))
            fi
          done

          echo "process_violations=$violations" >> "$GITHUB_OUTPUT"

      - name: Validate presence of .substvar files in META-INF folders for specific environments
        id: validate_substvar
        shell: bash
        continue-on-error: true
        run: |
          echo "üîç STEP 3: Checking for .substvar files in META-INF folders..."

          violations=0
          envs="DEV4 IT UAT ST PT AM"

          # Step 1: Find all "META-INF" directories
          mapfile -t meta_dirs < <(find . -type d -name META-INF)

          # Step 2: Filter valid application directories (exclude paths like *.module)
          declare -A seen
          app_dirs=()
          for meta in "${meta_dirs[@]}"; do
            parent_dir=$(dirname "$meta")
            base=$(basename "$parent_dir" | tr '[:upper:]' '[:lower:]')
            # Skip if path includes '.module' or already seen
            if [[ "$parent_dir" == *".module"* ]]; then
              continue
            fi
            if [[ -z "${seen[$base]}" ]]; then
              seen[$base]=1
              app_dirs+=("$parent_dir")
            fi
          done

          echo "üîé Application to validate:"
          for app in "${app_dirs[@]}"; do echo "$app"; done

          # Step 3: Check for each expected .substvar file
            for app_dir in "${app_dirs[@]}"; do
              meta_inf="$app_dir/META-INF"
              echo "üì¶ Validating application: $app_dir"
              echo "üîé Current directory: $(pwd)"
              echo "üîé Resolving META-INF path: $(realpath "$meta_inf")"
              echo "üîé Listing files in $meta_inf:"
              ls -l "$meta_inf" || echo "‚ö†Ô∏è Could not list files in $meta_inf"

              echo "üîé Searching for IT.substvar with find:"
              find "$meta_inf" -type f -iname 'IT.substvar' -exec ls -l {} \; || echo "‚ö†Ô∏è find did not find IT.substvar"

              for env in $envs; do
                if find "$meta_inf" -type f -iname "$env.substvar" -print -quit | grep -q .; then
                  echo "‚úÖ Found $env.substvar in $meta_inf"
                else
                  echo "‚ö†Ô∏è Environment .substvar not found: $meta_inf/$env.substvar"
                  echo "::warning file=$meta_inf/$env.substvar::Missing $env.substvar"
                  violations=$((violations + 1))
                fi
              done
            done

          echo "substvar_violations=$violations" >> "$GITHUB_OUTPUT"

      - name: Fail job if any violations found
        if: |
          steps.validate_projects.outputs.project_violations != '0' || 
          steps.validate_processes.outputs.process_violations != '0' || 
          steps.validate_substvar.outputs.substvar_violations != '0'
        run: |
          echo "‚ùå Validation errors detected. Failing the job."
          exit 1
