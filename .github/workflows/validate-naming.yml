name: validate-naming

on:
  push:
    branches:
      - test-branch

jobs:
  validate-naming:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: STEP 1: Validate project names (.project files) for kebab-case
        id: validate_projects
        shell: bash
        continue-on-error: true
        run: |
          echo "üîç STEP 1: Validating project names (.project files) for kebab-case..."
          project_violations=0

          is_kebab_case() {
            [[ "$1" =~ ^[a-z0-9]+(-[a-z0-9]+)*$ ]]
          }

          IFS=$'\n'
          project_files=($(find . -type f \( -name ".project" -o -name "*.project" \)))
          echo "üîé Found ${#project_files[@]} .project files"

          for project_file in "${project_files[@]}"; do
            proj_name=$(grep -oPm1 '(?<=<name>)[^<]+' "$project_file" || echo "")
            if [[ -z "$proj_name" ]]; then
              echo "‚ùå ERROR: No <name> tag found in $project_file"
              echo "::error file=$project_file::Missing <name> tag"
              project_violations=$((project_violations + 1))
              continue
            fi

            if [[ "$proj_name" == *.module ]]; then
              core_name="${proj_name%.module}"
            elif [[ "$proj_name" == *.parent ]]; then
              core_name="${proj_name%.parent}"
            else
              core_name="$proj_name"
            fi

            if ! is_kebab_case "$core_name"; then
              echo "‚ùå ERROR: Invalid project name '$proj_name' (found in $project_file)"
              echo "::error file=$project_file::Invalid project name '$proj_name'. Expected kebab-case"
              project_violations=$((project_violations + 1))
            fi
          done

          echo "project_violations=$project_violations" >> $GITHUB_OUTPUT
          echo "----"
          if (( project_violations > 0 )); then
            echo "üö´ Project naming validation failed: $project_violations violations found."
            exit 1
          else
            echo "‚úÖ All project names follow kebab-case."
          fi

      - name: STEP 2: Validate process filenames (.bwp files) for camelCase
        id: validate_processes
        shell: bash
        continue-on-error: true
        run: |
          echo "üîç STEP 2: Validating process filenames (.bwp) for camelCase..."
          camel_case_regex='^[a-z]+([A-Z][a-z0-9]*)*$'

          mapfile -t bwp_files < <(find . -type f -name "*.bwp")
          echo "üîé Found ${#bwp_files[@]} .bwp files"

          process_violations=0
          for file in "${bwp_files[@]}"; do
            filename=$(basename "$file")
            name_without_ext="${filename%.bwp}"

            if [[ ! "$name_without_ext" =~ $camel_case_regex ]]; then
              echo "‚ùå ERROR: Invalid process name '$filename' (found in $file)"
              process_violations=$((process_violations + 1))
            fi
          done

          echo "process_violations=$process_violations" >> $GITHUB_OUTPUT
          echo "----"
          if (( process_violations > 0 )); then
            echo "üö´ Process naming validation failed: $process_violations violations found."
            exit 1
          else
            echo "‚úÖ All process (.bwp) filenames follow camelCase."
          fi

      - name: STEP 3: Validate no hardcoded values in .bwp files
        id: validate_hardcoded
        shell: bash
        continue-on-error: true
        run: |
          echo "üîç STEP 3: Scanning for hardcoded values in .bwp files..."

          hardcoded_violations=0
          bwp_files=$(find . -type f -name "*.bwp")

          for file in $bwp_files; do
            if grep -qE 'select\s*=\s*(&quot;|")([\'"])[^$<>&]+(\2)(&quot;|")' "$file"; then
              echo "‚ùå ERROR: Hardcoded value found in $file"
              grep -oEn 'select\s*=\s*(&quot;|")([\'"])[^$<>&]+(\2)(&quot;|")' "$file" | while read -r line; do
                echo "::error file=$file::Hardcoded select attribute -> $line"
              done
              hardcoded_violations=$((hardcoded_violations + 1))
            fi
          done

          echo "hardcoded_violations=$hardcoded_violations" >> $GITHUB_OUTPUT
          echo "----"
          if (( hardcoded_violations > 0 )); then
            echo "üö´ Hardcoded value validation failed: $hardcoded_violations violations found."
            exit 1
          else
            echo "‚úÖ No hardcoded values found in .bwp files."
          fi

      - name: Fail job if any violations found
        if: steps.validate_projects.outputs.project_violations != '0' || steps.validate_processes.outputs.process_violations != '0' || steps.validate_hardcoded.outputs.hardcoded_violations != '0'
        run: |
          echo "‚ùå Validation errors detected. Failing the job."
          exit 1
